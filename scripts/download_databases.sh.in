#!@GNUBASH@

set -o nounset -o pipefail -o errexit

function install_kraken_db {
    echo "Downloading Kraken database."

    local DBNAME="kraken_db"
    mkdir -p "$DBNAME"

    # NOTE: The defualt kraken database is a very large file, after unpacking,
    # this will require about 100GB of disc space. If this is not feasible use
    # another database instead. For this please see link above or commented
    # lines below.
    local DBURL="https://genome-idx.s3.amazonaws.com/kraken/k2_pluspfp_20210127.tar.gz"

    # smaller database version, uncomment to use. The _database_ itself takes
    # up 8GB, but the entire dir after installation will take up around 12 GB.
    # local DBURL="https://genome-idx.s3.amazonaws.com/kraken/k2_pluspfp_8gb_20210127.tar.gz"
    
    @WGET@ -qO- "$DBURL" | tar -C $DBNAME -xzv

    @KRAKEN2_BUILD@ --use-ftp --download-taxonomy --db $DBNAME
    @KRAKEN2_BUILD@ --build --db $DBNAME

    echo "$(date) Built Kraken2 db downlaoded from $DBURL." >> $1
}


function install_krona_db {
    echo "Downloading Krona database."

    local DBNAME="krona_db"
    mkdir -p "$DBNAME"

    KRONA="$(dirname @IMPORT_TAXONOMY@)/../share/krona-tools/"
    $KRONA/updateTaxonomy.sh "$DBNAME"
    $KRONA/updateAccessions.sh "$DBNAME"

    # FIXME I could not figure out a way to record any infos of how the data
    # downloaded is versioned.
    echo "$(date) Installed/updated KRONA db." >> $1
}


function install_vep_db {
    echo "Downloading VEP database."

    local DBNAME="vep_db"
    mkdir -p "$DBNAME"

    local DBURL="ftp://ftp.ensemblgenomes.org/pub/viruses/variation/indexed_vep_cache/sars_cov_2_vep_101_ASM985889v3.tar.gz"

    @WGET@ -qO- "$DBURL" | tar -C $DBNAME -xzv    

    echo "$(date) Downlaoded VEP db from $DBURL." >> $1
}




# Each of the procedures expect to be operating in $DBDIR.
DBDIR=$PWD/databases
mkdir -p $DBDIR

cd $DBDIR

LOGFILE="../db_dl.log"

if test -e "$LOGFILE"
then
    rm "$LOGFILE"
fi

install_kraken_db "$LOGFILE"
install_krona_db  "$LOGFILE"
install_vep_db    "$LOGFILE"

echo "Done."
